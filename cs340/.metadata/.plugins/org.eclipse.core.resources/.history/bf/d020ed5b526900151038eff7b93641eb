import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;


public class Solution {

	/**
	 * Take a rectangular grid of numbers and find the length
	 * of the longest non-decreasing sub-sequence.
	 * @return the length as an integer.
	 */
	public static int longestSequence(int[][] grid) {
        int[][] bestNextNum = new int[numRow][numCol];
		
        int min = grid[1][1];
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
            	
            	if (grid[i][j] < min)
            		min = grid[i][j];

                //Find the best number to follow the current number
                
                //int nextBestNum = grid[i][j];
                if (i > 0) {
                	//W
                	if (grid[i-1][j] >= bestNextNum[i][j])
                		bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i-1][j]);
                	if (j > 0) {
                		//NW
                		if (grid[i-1][j-1] >= bestNextNum[i][j])
                			bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i-1][j-1]);
                	}
                	if (j < grid[i].length-1) {
                		//SW
                		if (grid[i-1][j+1] >= bestNextNum[i][j])
                			bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i-1][j+1]);
                			
                	}
                }
                if (i < grid.length-1) {
                	if (grid[i+1][j] >= bestNextNum[i][j]) {
                		bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i+1][j]);
                	}
                	if (j > 0) {
                		if (grid[i+1][j-1] >= bestNextNum[i][j])
                			bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i+1][j-1]);
                	}
                	if (j < grid[i].length-1) {
                		if (grid[i+1][j+1] >= bestNextNum[i][j])
                			bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i+1][j+1]);
                	}
                }
                if (j > 0) {
                	if (grid[i][j-1] >= bestNextNum[i][j])
                		bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i][j-1]);
                }
                if (j < grid[i].length-1) {
                	if (grid[i][j+1] >= bestNextNum[i][j])
                		bestNextNum[i][j] = Math.min(bestNextNum[i][j], grid[i][j+1]);
                }
                	
            }
            
            
        }
        
        
		return 0;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

		int numRows = 0;
		int numCols = 0;
		String[] firstLine = reader.readLine().split("\\s+");
		numRows = Integer.parseInt(firstLine[0]);
		numCols = Integer.parseInt(firstLine[1]);

		numRow = numRows;
		numCol = numCols;
		
		int[][] grid = new int[numRows][numCols];

		for (int row = 0; row < numRows; row++) {
		    String[] inputRow = reader.readLine().split("\\s+");

		    for (int col = 0; col < numCols; col++) {
		        grid[row][col] = Integer.parseInt(inputRow[col]);
		    }
		}
		int length = longestSequence(grid);
		System.out.println(length);
	}
	
	public static int numRow;
	public static int numCol;

}
